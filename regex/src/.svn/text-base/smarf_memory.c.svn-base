#include "smarf_memory.h"

smarf_memory::smarf_memory(DFA *dfa_in , int threshhold_in)
{
    dfa = dfa_in;

    no_states = dfa->size();

    no_SAS_states = 0;

    

    dfa_table_memory = 0;
    link_table_memory = 0;
    state_t s;
    
    for(s = 0; s<dfa->size(); s++)
    {
        if(!dfa->accepts(s)->empty())
        {
            no_SAS_states++;
        }
    }

    int state_i_size = (int) ceil(log(no_states)/(MIN_BLOCK_SIZE*8*log(2))) ;

    int SAS_i_size = (int) ceil(log(no_SAS_states)/(MIN_BLOCK_SIZE*8*log(2))) ;

    //state_t *default_tx = dfa->get_default_tx();

    //tx_list **labeled_tx = dfa->get_labeled_tx();

    ifstream infile;
    infile.open("..//debug_output//correlation.txt",ifstream::in);
    vector < vector<int> > data;
    vector < vector<int> >::iterator it,itr;
    vector<int>::iterator iti;
    string line;
    linked_set *temp = NULL;
    while(getline(infile,line))
    {
        vector<int> linedata;
        stringstream linestream(line);
        int value;
        while(linestream>>value)
        {
            linedata.push_back(value);
        }
        //cout<<endl;		
        data.push_back(linedata);
    }
    infile.close();
    unsigned int i,j;
    unsigned int sas_size = data.size();
    unsigned int *marker = new unsigned int [sas_size];
    symbol_t bit_no = 0;
    for(i=0;i<sas_size;i++)
    {
        marker[i] = 0;
    }
    for(i=0;i<sas_size;i++)
    {
        it = data.begin() + i;
        if((*it)[3] != 1)
        {
            if(it != data.end() - 1)
            {
                if((*it)[1] != (*(it+1))[1] | (*it)[0] != (*(it+1))[0])
                    marker[i] = 1;
                else if((*(it+1))[3] == 1  && ( (*it)[1] != (*(it+2))[1] | (*it)[0] != (*(it+2))[0] ) )
                    marker[i] = 1;
            }
            else
                marker[i] = 1;
            bit_no++;
        }
        else
        {
            marker[i] = 2;
            //bit_no++;
        }
    }
    int_set *char_set[256];
    for(i=0;i<256;i++)
        char_set[i] = new int_set[sas_size];
    i = 0;
    for(it = data.begin(); it < data.end() ;it++)
    {
        i++;
        if(it->size() >= 4)
        {
            for(j=4; j < it->size() ;j++)
                char_set[(*it)[j]]->insert(i);
        }
    }
    cout<<bit_no<<" "<<endl;
    int bit_i_size = (int) ceil(log(bit_no)/(MIN_BLOCK_SIZE*8*log(2))) ;
    char_table_memory = 0;
    for(i=0;i<256;i++)
    {
        if(!char_set[i]->empty())
        {
            char_table_memory += (int) ceil(bit_no/MIN_BLOCK_SIZE*8);
        }
    }
    
    for(s = 0; s< dfa->size(); s++)
    {
        state_t siz = dfa->get_lable_size(s);
        if(siz  > threshold)
        {
            dfa_table_memory += state_i_size + (256/(MIN_BLOCK_SIZE*8)) + state_i_size*256 + state_i_size;
        }
        else
        {
            dfa_table_memory += state_i_size + (256/(MIN_BLOCK_SIZE*8)) + state_i_size*siz + state_i_size;        
        }

        if(!dfa->accepts(s)->empty())
        {
            state_t  sz = dfa->accepts(s)->size();
            link_table_memory += SAS_i_size + bit_i_size*(1 + sz);
            dfa_table_memory += SAS_i_size; 
        }
    }
}
